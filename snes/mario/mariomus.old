#!/usr/bin/perl

# cab - 19 August, 2001

use MIDI;

$tempo_factor = 24_000_000;  # 60M is std MIDI divisor

%songtitles = ('A' => [
				'Title', 'Main Map', 'Yoshi Island', 'Vanilla Dome',
				'Star Road', 'Forest of Illusion', 'Valley of Bowser',
				'Bowser Valley Entrance', 'Special'
			   ], 'B' => [
				'SMWorld 2', 'SMWorld', 'Water', 'Bowser', 'Koopa Kid',
				'Cave', 'Haunted House', 'Castle', '08',
				'Game Over', 'Koopa Kid Defeated', 'Level Complete',
				'Invincibility', 'P Block', '0E', '0F',
				'10', 'Bonus Game', 'Story', 'Bonus Game End',
				'Destroy Castle', 'Bowser', '16', '17',	'Bowser 2',
				'Bowser 2', '1A', '1B'
			   ]);

@optext = ("Set patch", "Pan", "Pan fade", "undef", "de",
           "df", "Master volume", "Master vol fade", "Tempo", "Tempo fade",
           "Transpose (global)", "e5", "e6", "e7", "e8",
           "Call Subroutine", "ea", "eb", "ec", "undef", "Portamento", 
           "Echo vbits/volume", "Echo off",
           "Echo delay, feedback, filter", "Echo volume fade");

@notes = ("C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B");

@patchmap = ( 0, 0, 0, 0, 0, 33, 0, 0, # 00-07
              0, 0, 0, 0, 0, 0, 0, 0, # 08-0F
              0, 0, 0, 0, 0, 0, 0, 0, # 10-17
              0, 0, 0, 0, 0, 0, 0, 0, # 18-1F
              0, 0, 0);               # 20-22

@transp   = ( 0, 0, 0, 0, 0, 0, 0, 0, # 00-07
              0, 0, 0, 0, 0, 0, 0, 0, # 08-0F
              0, 0, 0, 0, 0, 0, 0, 0, # 10-17
              0, 0, 0, 0, 0, 0, 0, 0, # 18-1F
              0, 0, 0);               # 20-22

if (@ARGV) {
  foreach (@ARGV) {
  	$bank = substr $_, 0, 1, "";
    $dosong{uc $bank}[hex $_] = 1;
  }
} else {
  @{$dosong{A}} = (1) x 9;
  @{$dosong{B}} = (1) x 0x1c;
}  

open ROM, "< mario.smc" or die;

# spc data start addr
$spcdata = &readrom(0x0e8000);
$songdata{A} = &readrom(0xe98b1);
$songdata{B} = &readrom(0xeaed6);

# tables from spc code
@oplen  = unpack "C*", substr($spcdata, 0x0fc2 - 0x500, 0x1d);
@durpct = unpack "C*", substr($spcdata, 0x1268 - 0x500, 8);
@voltbl = unpack "C*", substr($spcdata, 0x1270 - 0x500, 0x10);
@pantbl = unpack "C*", substr($spcdata, 0x1280 - 0x500, 0x15);

foreach $songbank ('A', 'B') {
for ($song = 0, $numdone = 0; $song < @{$dosong{$songbank}}; $song++) {
  next unless $dosong{$songbank}[$song];

  printf STDERR "%s%02x ", $songbank, $song;
  print STDERR "\n" if ++$numdone % 16 == 0;

  $opus = new MIDI::Opus ({'format' => 1, 'ticks' => 48});
  my $ctrack = new MIDI::Track;
  push @{$opus->tracks_r}, $ctrack;
  my $cevents = [];

  open OUT, sprintf("> txt/%s%02X - %s",
  					$songbank, $song, $songtitles{$songbank}[$song]);
  printf OUT "Song %s%02x - %s:\n", 
  		$songbank, $song, $songtitles{$songbank}[$song];

  my $songbase = unpack "v", substr($songdata{$songbank}, $song * 2, 2);

  # finally, a place for a closure.  lisp class was fun AND useful.
  my $readsong = sub { my ($format, $start, $len) = @_;
                       return unpack $format,
                         substr($songdata{$songbank}, $start - 0x1360, $len);
                     };
  
  #&hexdump($song[$song]{apudest}, $sdata);

  printf OUT "Song start: %04x\n", $songbase;

  my @vtbls;
  my $msptr = $songbase;
  my $rptcount = 0;
  for (;;) {
    my $vtbladdr = &$readsong("v", $msptr, 2);
    $msptr += 2;
    if ($vtbladdr < 0x100) {
      printf OUT "VTBL cmd: %04x\n", $vtbladdr;
      if ($vtbladdr) {
        # repeat; 0xff is forever
        my $vtblarg = &$readsong("v", $msptr, 2);
        printf OUT "VTBL loop arg: %04x\n", $vtblarg;
        $msptr += 2;
      } else {
        # done.
        last;
      }
    } else {
      my @vtbl     = &$readsong("v8", $vtbladdr, 16);
      push @vtbls, [@vtbl];
      printf OUT "VTBL: %04x\n", $vtbladdr;
      for (my $i = 0; $i < 8; $i++) {
        printf OUT "  %d:%04x", $i, $vtbl[$i];
      }
      print OUT "\n";
    }
  }

    my $maxtime = 0;
    for (my $v = 0; $v < 8; $v++) {
#print STDERR "v=$v\n";
      print OUT "Voice $v:\n";

      my $dur;
      my $durpct;
      my $totaltime = 0;
      my $master_rpt = 1;

      my $velocity = 100;
      my $volume = 0;
      my $balance = 64;
      my $tempo = 120;
      my $channel = $v;
      my $perckey = 0;
      my $t = 0;  # transpose (from patch settings)
      my $transpose = 0;
      my $substart = 0;
      my $subret = 0;
      my $subcount = 0;
      my $rptaddr  = 0;
      my $rptcount = 0;

      my $track = new MIDI::Track;
      my $e = [];  # track events
      push @$e, ['track_name', 0, "Voice $v"];
      push @$e, ['control_change', 0, $channel, 0, 0]; # bank 0

  for ($vtblnum = 0; $vtblnum < @vtbls; $vtblnum++) {
    my @vtbl = @{$vtbls[$vtblnum]};
    $totaltime = $vtbltime[$vtblnum-1]
    	if $vtbltime > 0 && $vtbltime[$vtblnum-1] > $totaltime;
    
      for (my $p = $vtbl[$v]; ; $p++) {
        last unless $p;
        #last unless ($v > 0 || $subret || $p < $vtbl[$v+1]);
        last if ($v > 0) && ($totaltime >= $maxtime
        					 || $totaltime >= $vtbltime[$vtblnum]);

        my $opcount = 0;
        my $cmd = &$readsong("C", $p, 1);
#printf STDERR " p=%04x  cmd=%02x\n", $p, $cmd;
        printf OUT "  %04x:  %02x", $p, $cmd;
        $cmd = 0x100 if $cmd == 0;  # hack for end repeat

        if ($cmd < 0x80) {
          $dur = $cmd;
          $opcount = 1;
          my $op1 = &$readsong("C", $p+1, 1);
          printf OUT " %02x", $op1;
#printf STDERR " op1=%02x\n", $op1;
          if ($op1 < 0x80) {
            $opcount++;
            $durpct = $durpct[($op1 >> 4) & 0x7];
            #$volume = $voltbl[$op1 & 0xf];
            $cmd = &$readsong("C", $p+2, 1);
            printf OUT " %02x", $cmd;
          } else {
            $cmd = $op1;
          }
          $p += $opcount;
#printf STDERR " final cmd=%02x p=%04x\n", $cmd, $p;
        }
        if ($cmd < 0xda) {
          # note
          print OUT "   " x (4-$opcount);
          my $notedur = int($dur * $durpct / 256);
          $notedur = $dur - 2 if $notedur > $dur - 2;
          $notedur = 1 if $notedur < 1;
          
          if ($cmd == 0xc6) {
            printf OUT "Tie          Dur %02x", $dur;   
            my ($last_ev) = grep {$_->[0] eq 'note'} reverse @$e;
  	        $last_ev->[2] += $dur;  # use full dur; already did notedur
          } elsif ($cmd == 0xc7) {
            printf OUT "Rest         Dur %02x", $dur;   
          } elsif ($cmd < 0xd0) {
            $cmd &= 0x7f;
            my ($octave, $note) = (int($cmd/0xc), $cmd % 0xc);
            printf OUT "Note %s     Dur %02x",
                $notes[$note] . $octave, $dur;
            my $mnote = 12 * ($octave + $t+2) + $note + $transpose;
            push @$e, ['note', $totaltime, $notedur, $channel, $mnote, $velocity];
          } else {
            # percussion note
            printf OUT "Perc %02x     Dur %02x",
                 $cmd - 0xd0, $dur;
            my $mnote = -$patchmap[$cmd-0xd0+0x14];
            #my $mnote = 38;
            push @$e, ['note', $totaltime, $notedur, 9, $mnote, $velocity];
          }
          $totaltime += $dur;
        } else {
          # command
          my $oplen = $cmd == 0x100 ? 0 : $oplen[$cmd - 0xda] - 1;
          my $optext = $cmd == 0x100 ? "End repeat/return" : $optext[$cmd - 0xda];
          my (@op) = &$readsong("C*", $p+1, $oplen);
          print OUT map {sprintf " %02x", $_} @op;
          print OUT "   " x (4-$oplen);
          print OUT $optext;

          if ($cmd == 0xda) {
            # set patch
            my $inst = $patchmap[$op[0]];
            $t = $transp[$op[0]];
	    push @$e, ['patch_change', $totaltime, $v, $inst];
          } elsif ($cmd == 0xe2) {
            # tempo
            $tempo = $op[0];
            push @{$cevents},
	       ['set_tempo', $totaltime, int($tempo_factor / $tempo)];
          } elsif ($cmd == 0xe3) {
            # tempo fade
            my ($tdelta, $cb);
            my $bdelta = $op[1] - $tempo;
            my $stepinc = $bdelta / $op[0];
	    for ($tdelta = 1, $cb = $tempo + $stepinc;
                   $tdelta < $op[0]; $tdelta++, $cb += $stepinc) {
               push @{$cevents}, ['set_tempo', $totaltime + $tdelta * 2, 
                          int($tempo_factor / $cb)];
            }
            $tempo = $op[1];
          #} elsif ($cmd == 0xe5) {
          #  $rptaddr = $p + $oplen;
          #  $rptcount = 0;
          #} elsif ($cmd == 0xe6) {
          #  if (++$rptcount == $op[0]) {
          #    # done.
          #    #$rptaddr = 0;
          #    $rptcount = 0;
          #  } else {
          #    $p = $rptaddr;
          #    $oplen = 0;
          #  }
          } elsif ($cmd == 0xe9) {
            # gosub
            $subret = $p + $oplen;
            $subcount = $op[2];
            $substart = 0x100 * $op[1] + $op[0];
            $p = $substart;
            $oplen = -1;
          } elsif ($cmd == 0x100) {
            # end repeat/return
            if ($subcount) {
              if (--$subcount > 0) {
              	$p = $substart;
              	$oplen = -1;
              } else {
                $p = $subret;
                $substart = 0;
                $subret = 0;
                $oplen = 0;
              }
            } else {
            	printf STDERR "voice %d tried main loop return at %04x\n", $v, $p if $v;
              $maxtime = $totaltime if $v == 0;
              $vtbltime[$vtblnum] = $totaltime if $v == 0;
              last;
            }
          }
          $p += $oplen;
        }
        
        print OUT "\n";
      } # for p
      print OUT "\n";
    } # foreach vtbl
      print OUT "\n";
      # set track events from work array
      $track->events_r(MIDI::Score::score_r_to_events_r($e));
      push @{$opus->tracks_r}, $track;
    } # for v
  &hexdump($song[$song]{apudest}, $sdata);
  close OUT;
  $ctrack->events_r(MIDI::Score::score_r_to_events_r($cevents));
  #$opus->dump({dump_tracks => 1});
  $opus->write_to_file(sprintf "mid/%s%02X - %s.mid",
  						 $songbank, $song, $songtitles{$songbank}[$song]);
}
} # foreach bank

print STDERR "\n";
close ROM;


sub hexdump {
  my ($addr, $data, $line) = @_;
  $line ||= 16;

  for (my $p = 0; $p < length $data; $p += $line) {
    printf OUT "    %04x: ", $addr + $p;
    if ($line == 16) {
      print OUT join(' ', map {sprintf "%02x", ord }
			 split //, substr($data, $p, 8)),
  	  '  ', join(' ', map {sprintf "%02x", ord }
			 split //, substr($data, $p + 8, 8)), "\n";
    } else {
      print OUT join(' ', map {sprintf "%02x", ord }
			 split //, substr($data, $p, $line)), "\n";
    }
  }
}

sub s2o {
  my ($bank, $offs) = (int($_[0] / 0x10000), $_[0] % 0x10000);
  return $bank * 0x8000 + $offs - 0x8000 + 0x200;
}

sub readrom {
  my ($src) = @_;
  my ($buf);

  seek ROM, &s2o($src), 0;
  read ROM, $buf, 4;
  my ($len, $addr) = unpack "v2", $buf;
  read ROM, $buf, $len;  # might get a couple extra, no biggie
  return $buf;
}
